// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//? migrate - npx prisma db push
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//? customer +
model Customer {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  customerType       CustomerType
  firstName          String
  lastName           String
  email              String       @unique
  phone              String       @unique
  nationalID         String       @unique
  gender             Gender
  maxCreditLimit     Float
  maxCreditDays      Int
  //? new property
  unpaidCreditAmount Int?         @default(0)
  //? new end
  taxPin             String?
  dob                DateTime?    @default(now())
  country            String
  location           String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  //? relation new
  Sales              Sale[]
}

//? enum customer type
enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  OTHER
}

//? user +
model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  password  String
  firstName String
  lastName  String
  phone     String    @unique
  dob       DateTime?
  gender    Gender
  image     String?
  role      Role      @default(ATTENDANT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shops     Shop[]
  //? field for password reset
  resetToken String?
  resetTokenExpiry  DateTime?
}

//? enum gender
enum Gender {
  MALE
  FEMALE
}

//? enum role
enum Role {
  ADMIN
  ATTENDANT
}

//? shop +
model Shop {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId // Unique ID
  name         String
  slug         String    @unique
  location     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  adminId      String    @db.ObjectId
  admin        User      @relation(fields: [adminId], references: [id])
  attendantIds String[]  @db.ObjectId
  //? relation
  Products     Product[]
}

//? supplier +
model Supplier {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  supplierType       SupplierType
  name               String
  contactPerson      String
  location           String
  rating             Float
  country            String
  phone              String?      @unique
  email              String?      @unique
  website            String?
  taxPin             String?
  registrationNumber String?      @unique
  bankAccountNumber  String?
  paymentTerms       String?
  logo               String?      @default("https://utfs.io/f/a25ac16b-ae35-40c6-8d12-516303b22d66-1nq2cb.png")
  creditScore        Float?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  //? relation
  Products           Product[]
}

//? supplier type
enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}

//? kategoriya +
model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  //description String?
  //? relations
  Products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

//? vahid +
model Unit {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String
  slug         String    @unique
  //? relation
  Products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

//? marka +
model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  //? relation
  Products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

//? product
model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  sku            String    @unique
  productCode    String    @unique // new unique
  description    String?
  slug           String    @unique
  //?numbers
  unitPrice      Float
  costPrice      Float
  reorderPoint   Int
  weight         Float?
  taxRate        Float?
  quantity       Int
  alertQty       Int
  stockQty       Int
  //?numbers end
  imageUrl       String?   @default("https://utfs.io/f/044957a4-b8a0-405e-904f-0be7c0f5dc8c-oo9z3s.png")
  dimensions     String?
  notes          String?
  expiryDate     DateTime? @default("2025-01-01T00:00:00.000Z")
  batchNumber    String?
  barCode        String    @unique //? new unique
  wholeSalePrice Int?      @default(0) //? TOPDAN SATIS QIYMETI
  //? relations
  //? category 
  category       Category  @relation(fields: [categoryId], references: [id])
  categoryId     String    @db.ObjectId

  //? unit
  unit   Unit   @relation(fields: [unitId], references: [id])
  unitId String @db.ObjectId

  //? brand
  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String @db.ObjectId

  //? supplier
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId String   @db.ObjectId

  //? shop - new relation
  shop      Shop     @relation(fields: [shopId], references: [id])
  shopId    String   @db.ObjectId
  //? relation end
  //? time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //? relation - 2
  SaleItems SaleItem[]
}

//? sale item
model SaleItem {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  //!
  qty           Int
  salePrice     Float
  productName   String
  productImage  String
  //? relation
  saleId    String  @db.ObjectId
  sale      Sale    @relation(fields: [saleId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  //? time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

//? sale
model Sale {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  customerName    String?
  saleNumber     String        @unique//? sale Number
  customerEmail   String?
  saleAmount     Int? //? 500  //? sale Amount
  balanceAmount   Int?          @default(0) //? 200
  paidAmount      Int? //? 300
  //orderStatus     OrderStatus   @default(PENDING)
  saleType         SaleType//? saletype
  paymentMethod   PaymentMethod  @default(CASH)
  transactionCode String?
  //? relation
  customerId      String        @db.ObjectId
  customer        Customer      @relation(fields: [customerId], references: [id])
  SaleItems       SaleItem[]
  //? time
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

//? enum 

enum PaymentMethod {
CASH
MOBILEMONEY
}
enum SaleType {//? sale type
  PAID
  CREDIT
}

// {
//   "email": "orxan2@mail.ru",
//   "username": "orxan",
//   "password": "12345",
//   "firstName": "John",
//   "lastName": "Doe",
//   "phone": "+1233567893",
//   "gender": "MALE",
//   "image": "https://t4.ftcdn.net/jpg/05/49/98/39/360_F_549983970_bRCkYfk0P6PP5fKbMhZMIb07mCJ6esXL.jpg",
//   "role": "ATTENDANT"
// }
